import argparse
import sys
import time
import json
import os
import binascii
import slacker

# sample record. Change Value and Name fields
route53_rec = {
  "Comment": "optional comment about the changes in this change batch request",
  "Changes": [
    {
      "Action": "UPSERT",
      "ResourceRecordSet": {
        "Name": "DNS domain name",
        "Type": "CNAME",
        "TTL": 60,
        "ResourceRecords": [
          {
            "Value": "applicable value for the record type"
          },
        ],
      }
    },
  ]
}


mesos_slave_tmpl = """#!/bin/bash
# This file is generated by Chef

# evironmental variables
ULIMIT="-n 16384"

# set ulimit if defined
[[ ! ${ULIMIT:-} ]] || ulimit $ULIMIT

# stdout and stderr to syslog
exec 1> >(exec logger -p user.info -t "mesos-slave")
exec 2> >(exec logger -p user.err  -t "mesos-slave")
ENV=__ENV__
PUBLIC_HOSTNAME=__PUBLIC_HOSTNAME__
DOMAIN=__DOMAIN__
IP=$(curl http://169.254.169.254/latest/meta-data/local-ipv4)
INSTANCE_TYPE=$(curl http://169.254.169.254/latest/meta-data/instance-type)
AVAILABILITY_ZONE=$(curl http://169.254.169.254/latest/meta-data/placement/availability-zone)

#PUBLIC_HOSTNAME=$(curl http://169.254.169.254/latest/meta-data/public-hostname)
# mesos binary configuration
exec /usr/sbin/mesos-slave \\
  --containerizers=docker,mesos \\
  --executor_registration_timeout=5mins \\
  --ip=$IP \\
  --isolation=cgroups/cpu,cgroups/mem \\
  --log_dir=/data/log/mesos \\
  --logging_level=INFO \\
  --hostname=${PUBLIC_HOSTNAME} \\
  --master=zk://zookeeper-000.${ENV}.${DOMAIN}:2181,zookeeper-001.${ENV}.${DOMAIN}:2181,zookeeper-002.${ENV}.${DOMAIN}:2181/mesos \\
  --port=5051 \\
  --recover=reconnect \\
  --resources="ports(*):[4000-11000, 21000-32000]" \\
  --strict \\
  --switch_user \\
  --attributes="loadtype:shared,instance_type:${INSTANCE_TYPE},rack:${AVAILABILITY_ZONE},reservation:spot" \\
  --work_dir=/data/mesos/work \\
"""

def get_private_this_host():
    os.system('curl -s http://169.254.169.254/latest/meta-data/local-ipv4 > pvt_ip')
    with open('pvt_ip', 'r') as fd:
        return fd.readline().strip()

def get_num_cpus_this_host():
    os.system('lscpu | grep CPU\(s\): > cpu_info')
    with open('cpu_info', 'r') as fd:
        for line in fd:
            if 'NUMA' not in line:
                return int(line.split()[-1])

def get_memory_in_gb_this_host():
    os.system("dmidecode -t 17 | grep 'Size.*MB' | awk '{s+=$2} END {print s / 1024}' > memory_info")
    with open('memory_info', 'r') as fd:
        return float(fd.readline().strip())

def get_instance_id_this_host():
    os.system('curl -s http://169.254.169.254/latest/meta-data/instance-id > instance_id')
    with open('instance_id', 'r') as fd:
        return fd.readline().strip()

def get_public_dns_name_this_host():
    os.system('curl -s http://169.254.169.254/latest/meta-data/public-hostname > pub_dns_name')
    with open('pub_dns_name', 'r') as fd:
        return fd.readline().strip()

def get_private_dns_name_this_host():
    os.system('curl -s http://169.254.169.254/latest/meta-data/local-hostname > pvt_dns_name')
    with open('pvt_dns_name', 'r') as fd:
        return fd.readline().strip()

def mesos_services(op_type):
    os.system('service mesos-slave {0}'.format(op_type))
    os.system('service docker {0}'.format(op_type))
    # https://github.com/docker/docker/issues/18113
    # Removes the local network db to avoid
    os.system('rm /var/lib/docker/network/files/local-kv.db')
    os.system('service consul {0}'.format(op_type))
    os.system('service awslogs {0}'.format(op_type))

def spark_virtualenv(region, env):
    return os.system('aws s3 cp --region {0} s3://my-{1}-assets/batch/python/spark-virtualenv.tar.gz . && sudo tar -C /data -xzvf  spark-virtualenv.tar.gz && rm spark-virtualenv.tar.gz'.format(region, env))

def parse_args():
    parser = argparse.ArgumentParser(description='User data for mesos hosts')
    parser.add_argument('--env', action="store", required=True)
    parser.add_argument('--region', action="store", required=True)
    parser.add_argument('--domain',action="store",required=True)
    parser.add_argument('--private_domain',action="store",required=True)
    parser.add_argument('--public_hosted_zone_id',action="store",required=True)
    parser.add_argument('--private_hosted_zone_id',action="store",required=True)
    return parser.parse_args()

def update_mesos_slave_config(env, hostname,domain):
    log_fd.write("Writing to /etc/mesos-chef/mesos-slave")
    with open('/etc/mesos-chef/mesos-slave', 'w') as updated_fd:
        # The script confuses python format, so doing this for now
        # I don't want to break out the file template separately
        updated_fd.write(mesos_slave_tmpl.replace("__ENV__", env).replace("__PUBLIC_HOSTNAME__",hostname).replace("__DOMAIN__",domain))

if __name__ == '__main__':
    cli_args = parse_args()
    hostname = None
    fname = '/etc/hosts'
    env = cli_args.env
    region = cli_args.region
    domain = cli_args.domain
    private_domain = cli_args.private_domain
    public_hosted_zone_id = cli_args.public_hosted_zone_id
    private_hosted_zone_id = cli_args.private_hosted_zone_id
    log_fd = open('user_data_spot.log', 'w')
    mesos_services('stop')
    org_pvt_ip = get_private_this_host()
    log_fd.write('Original IP:{0}\n'.format(org_pvt_ip))
    num_cpus = get_num_cpus_this_host()
    mem_ing_gb = get_memory_in_gb_this_host()


    os.system('cp /etc/hosts hosts.backup')
    with open('hosts-updated'.format(fname), 'w') as updated_fd:
        with open(fname, "r") as fd:
            for line in fd:
                updated_line = line
                if 'mesos-' in line:
                    ami_pvt_ip, full_host, partial_host = line.split()
                    pvt_ip_with_dashes = '-'.join(org_pvt_ip.split('.'))
                    # get 4 bytes of randomness
                    hostname = 'mesos-slave-{0}.{1}.{2}'.format(pvt_ip_with_dashes,env,domain)
                    private_hostname = 'mesos-slave-{0}-{1}.{2}'.format(pvt_ip_with_dashes,env,private_domain)
                    log_fd.write('changing line:{0}\n'.format(line))
                    updated_line = '{0} {1} mesos-slave-{2}-{3}\n'.format(
                        org_pvt_ip,
                        private_hostname,
                        pvt_ip_with_dashes,
                        env,
                    )
                updated_fd.write(updated_line)

    with open('/etc/hostname', 'w') as f:
        f.write(private_hostname)

    os.system('hostname {0}'.format(private_hostname))
    os.system('mv hosts-updated /etc/hosts')

    # Update the route-53 entry
    dns_name = get_public_dns_name_this_host()
    route53_rec["Changes"][0]['ResourceRecordSet']["ResourceRecords"][0]['Value'] = dns_name
    route53_rec["Changes"][0]['ResourceRecordSet']["Name"] = "{0}.".format(hostname)

    with open('route_53_entry.json', 'w') as fd:
        fd.write(json.dumps(route53_rec))
        print(json.dumps(route53_rec))

    private_dns_name = get_private_dns_name_this_host()
    route53_rec["Changes"][0]['ResourceRecordSet']["ResourceRecords"][0]['Value'] = private_dns_name
    route53_rec["Changes"][0]['ResourceRecordSet']["Name"] = "{0}.".format(private_hostname)

    with open('private_route_53_entry.json', 'w') as fd:
        fd.write(json.dumps(route53_rec))
        print(json.dumps(route53_rec))


    def CreateRoute53():
        cmd=["aws route53 change-resource-record-sets --hosted-zone-id {0} --change-batch file://route_53_entry.json".format(public_hosted_zone_id)]
        res = subprocess.call(cmd, shell=True)
        if res == 0:
            print("Public Entry for Route53 Created Successfully")
            return
        else:
            print("Public Entry For Route53 Failed")
            time.sleep(randint(0, 15))
            CreateRoute53()

    CreateRoute53()

    def CreatePrivateRoute53():
        cmd=["aws route53 change-resource-record-sets --hosted-zone-id {0} --change-batch file://private_route_53_entry.json".format(private_hosted_zone_id)]
        res = subprocess.call(cmd, shell=True)
        if res == 0:
            print("Private Entry for Route53 Created Successfully")
            return
        else:
            print("Private Entry For Route53 Failed")
            time.sleep(randint(0, 15))
            CreatePrivateRoute53()

    CreatePrivateRoute53()

    def HostTag():
        cmd = 'aws ec2 create-tags --region {0} --resources {1} --tags Key=Name,Value={2}'.format(
            region,
            instance_id,
            hostname,
        )
        res = subprocess.call(cmd,shell=True)
        if res == 0:
            print("Tags for hostname Created Successfully")
            return
        else:
            print("Trying Again")
            time.sleep(5)
            HostTag()

    HostTag()

    def PrivateHostTag():
        cmd = 'aws ec2 create-tags --region {0} --resources {1} --tags Key=PrivateName,Value={2}'.format(
            region,
            instance_id,
            hostname,
        )
        res = subprocess.call(cmd,shell=True)
        if res == 0:
            print("Tags for Private hostname Created Successfully")
            return
        else:
            print("Trying Again")
            time.sleep(5)
            PrivateHostTag()

    PrivateHostTag()

    def publicDNS():
        cmd = 'aws ec2 create-tags --region {0} --resources {1} --tags Key=publicDNS,Value={2}'.format(
            region,
            instance_id,
            dns_name,
        )
        res = subprocess.call(cmd,shell=True)
        if res == 0:
            print("Tags for PublicDNS Created Successfully")
            return
        else:
            print("Trying Again")
            time.sleep(5)
            publicDNS()

    publicDNS()

    def ServiceTag():
        cmd = 'aws ec2 create-tags --region {0} --resources {1} --tags Key=service,Value=mesos'.format(
            region,
            instance_id,
        )
        res = subprocess.call(cmd,shell=True)
        if res == 0:
            print("Tags for Service Mesos Created Successfully")
            return
        else:
            print("Trying Again")
            time.sleep(5)
            ServiceTag()

    ServiceTag()


    def privateDNS():
        cmd = 'aws ec2 create-tags --region {0} --resources {1} --tags Key=privateDNS,Value={2}'.format(
            region,
            instance_id,
            private_dns_name,
        )
        res = subprocess.call(cmd,shell=True)
        if res == 0:
            print("Tags for PrivateDNS Mesos Created Successfully")
            return
        else:
            print("Trying Again")
            time.sleep(5)
            privateDNS()

    privateDNS()

    # Once its

    update_mesos_slave_config(env,private_hostname,domain)
    spark_virtualenv(region, env)

    # just sleep for a bit for things to settle down...
    time.sleep(5)
    instance_id = get_instance_id_this_host()
    log_fd.write('instance-id:{0}\n'.format(instance_id))


    # Making sure you're creating the slave data fresh with new hostname
    os.system('rm -f /data/mesos/work/meta/slaves/latest')

    mesos_services('start')
